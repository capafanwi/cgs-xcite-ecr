{
    "name": "Example Name",
    "project": "Example-Name",
    "videosFolder": "videos",
    "imagesFolder": "images",
    "masksFolder": "masks",
    "segmentationsFolder": "segmentations",
    "subprojectsFolder": "submodels",
    "videoProjects": [
        {
            "name": "GS020010",
            "videoPath": "videos/GS020010/GS020010.360",
            "gpxMetadata": "videos/GS020010/metadata.gpx",
            "globalMask": "videos/GS020010/pedSegmentation.png"
        },
        {
            "name": "GS010022",
            "videoPath": "videos/GS010022/GS010022.360",
            "gpxMetadata": "videos/GS010022/metadata.gpx",
            "globalMask": "videos/GS010022/carSegmentation.png"
        }
    ],
    "samplesPerKm": 1000,
    "bounds": null,
    "imageFormat": "png",
    "submodelsWorkflow": true,
    "runJob": {
        "skipMasks": true,
        "skipImages": true,
        "generateImageGroups": false,
        "sfmConfigName": "config.yaml",
        "cameraOverridesName": "camera_models_overrides.json",
        "contextCaptureName": "context-capture.txt",
        "imageGroupsName": "image_groups.txt",
        "exifOverridesName": "exif_overrides.json"
    },
    "runSubmodels": {
        "buildDepthmaps": false
    },
    "openSfmSettings": {
        "depthmap_min_consistent_views": 4,
        "submodel_overlap": 20.0,
        "submodel_size": 80,
        "use_altitude_tag": true,
        "bundle_use_gps": true,
        "submodels_relpath": "submodels",
        "submodel_relpath_template": "submodels/submodel_%06d",
        "submodel_images_relpath_template": "submodels/submodel_%06d/images",
        "matching_use_segmentation": true,
        "depthmap_resolution": 1344,
        "matching_gps_distance": 150
    },
    "buildTiles": {
        "tilesFolder": "tiles",
        "tileSize": 25,
        "tileOverlap": 5,
        "decimatedLeafGeometricError": 1.0,
        "hlodStartGeometricError": 2.0,
        "hlodStepGeometricError": 1.0,
        "temp": "temp",
        "exportRoi": true,
        "artifactFolder": "artifacts",
        "minRequiredVerts": 500,
        "workflow": {
            "name": "MVS",
            "leafPipeline": [
                {
                    "name": "OpenMVS Densify",
                    "poolSize": 1,
                    "panicOnError": false,
                    "command": {
                        "function": "openmvs_densify",
                        "arguments": {
                            "exePath": "DensifyPointCloud",
                            "retryCount": 2,
                            "args": {
                                "ignoreMaskLabel": 0,
                                "removeDmaps": 1,
                                "roiBorder": -12.5,
                                "cropToRoi": 1,
                                "postprocessDmaps": 6
                            }
                        }
                    }
                },
                {
                    "name": "OpenMVS Reconstruct",
                    "poolSize": 2,
                    "panicOnError": false,
                    "command": {
                        "function": "openmvs_reconstruct",
                        "arguments": {
                            "exePath": "ReconstructMesh",
                            "retryCount": 2,
                            "args": {
                                "thicknessFactor": 0.25,
                                "roiBorder": -0.5,
                                "cropToRoi": 1
                            }
                        }
                    }
                },
                {
                    "name": "OpenMVS Texture",
                    "poolSize": 1,
                    "panicOnError": false,
                    "command": {
                        "function": "openmvs_texture",
                        "arguments": {
                            "exePath": "TextureMesh",
                            "retryCount": 2,
                            "exportType": "obj",
                            "args": {
                                "decimate": 0.2,
                                "emptyColor": 8421504
                            }
                        }
                    }
                },
                {
                    "name": "Weld",
                    "poolSize": 1,
                    "panicOnError": false,
                    "command": {
                        "function": "weld_vertices",
                        "arguments": {
                            "pythonScript": "/some-sfm-utils/scripts/weld.py"
                        }
                    }
                },
                {
                    "name": "To GLTF",
                    "poolSize": -1,
                    "panicOnError": false,
                    "command": {
                        "function": "to_gltf",
                        "arguments": {
                            "prepend": "texture",
                            "dropNormals": true,
                            "interleaveData": true,
                            "texcordEncoding": "ushort",
                            "flipYUVForKTX": true
                        }
                    }
                },
                {
                    "name": "Downsizing Images",
                    "poolSize": -1,
                    "panicOnError": false,
                    "command": {
                        "function": "max_texture_size",
                        "arguments": {
                            "maxDimension": 16384
                        }
                    }
                },
                {
                    "name": "To KTX",
                    "poolSize": 1,
                    "panicOnError": false,
                    "command": {
                        "function": "to_ktx",
                        "arguments": {
                            "ktxPath": "toktx"
                        }
                    }
                }
            ],
            "decimatedLeafPipeline": [
                {
                    "name": "Copy Child Artifact",
                    "poolSize": -1,
                    "panicOnError": false,
                    "command": {
                        "function": "copy_child",
                        "arguments": {
                            "format": "obj",
                            "topology": "mesh"
                        }
                    }
                },
                {
                    "name": "Bake Textures To Vertices",
                    "poolSize": 2,
                    "panicOnError": false,
                    "command": {
                        "function": "bake_texture_into_vertices",
                        "arguments": {
                            "namePrepend": "bake_textured"
                        }
                    }
                },
                {
                    "name": "Quadric Decimation",
                    "poolSize": 2,
                    "panicOnError": false,
                    "command": {
                        "function": "quadric_decimation",
                        "arguments": {
                            "pythonScript": "/some-sfm-utils/scripts/decimate.py",
                            "textured": false,
                            "targetTriReduction": 0.2,
                            "targetFormat": "ply"
                        }
                    }
                },
                {
                    "name": "To GLTF",
                    "poolSize": -1,
                    "panicOnError": false,
                    "command": {
                        "function": "to_gltf",
                        "arguments": {
                            "prepend": "to_gltf",
                            "flipYUVForKTX": true,
                            "dropNormals": true,
                            "interleaveData": true,
                            "texcordEncoding": "ushort"
                        }
                    }
                }
            ],
            "hlodPipeline": [
                {
                    "name": "Combine Children",
                    "poolSize": -2,
                    "panicOnError": false,
                    "command": {
                        "function": "combine_children",
                        "arguments": {
                            "inputFormat": "ply",
                            "outputFormat": "ply"
                        }
                    }
                },
                {
                    "name": "Quadric Decimation",
                    "poolSize": 2,
                    "panicOnError": false,
                    "command": {
                        "function": "quadric_decimation",
                        "arguments": {
                            "pythonScript": "/some-sfm-utils/scripts/decimate.py",
                            "textured": false,
                            "targetTriReduction": 0.125,
                            "targetFormat": "ply"
                        }
                    }
                },
                {
                    "name": "To GLTF",
                    "poolSize": -1,
                    "panicOnError": false,
                    "command": {
                        "function": "to_gltf",
                        "arguments": {
                            "prepend": "to_gltf",
                            "flipYUVForKTX": true,
                            "dropNormals": true,
                            "interleaveData": true,
                            "texcordEncoding": "ushort"
                        }
                    }
                }
            ]
        }
    },
    "360toFramesSettings": {
        "framesFile": "exif_overrides.json"
    },
    "MaskSettings": {
        "stuffOffset": 100,
        "segmentationForSky": 40,
        "percentgrayscaleLimit": 0.8,
        "skyMaskFolder": "skyMasks",
        "batchSize": 1,
        "individualMasksFolder": "skyMasks",
        "skyMaskParamFile": "/home/ubuntu/masking-and-segmentation/skysegsmall_sim-opt-fp16.param",
        "skyMaskModelFile": "/home/ubuntu/masking-and-segmentation/skysegsmall_sim-opt-fp16.bin",
        "confidenceThreshold": 0.5,
        "detectronConfig": "/home/ubuntu/detectron2/configs/Misc/panoptic_fpn_R_101_dconv_cascade_gn_3x.yaml",
        "detectronOpts": [
            "MODEL.WEIGHTS",
            "detectron2://Misc/panoptic_fpn_R_101_dconv_cascade_gn_3x/139797668/model_final_be35db.pkl",
            "INPUT.MAX_SIZE_TEST",
            "1600"
        ],
        "invertMask": true,
        "maskUseGlobalMask": true,
        "maskUseIndividualMask": true,
        "maskPrefix": "",
        "maskExtension": ".png.png",
        "maskStuff": [],
        "maskAllStuff": false,
        "maskThings": [],
        "maskAllThings": false,
        "invertSegmentation": false,
        "segmentationUseGlobalMask": false,
        "segmentationUseIndividualMask": true,
        "segmentationPrefix": "",
        "segmentationExtension": ".png.png",
        "segmentationStuff": [
            0,
            1,
            3,
            7,
            8,
            11,
            12,
            13,
            14,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            26,
            27,
            28,
            30,
            31,
            32,
            33,
            34,
            36,
            37,
            38,
            44,
            45,
            46,
            47,
            50,
            51,
            52
        ],
        "segmentationAllStuff": false,
        "segmentationThings": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12
        ],
        "segmentationAllThings": false
    }
}